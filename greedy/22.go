package main

// 括号生成
func generateParenthesis(n int) []string {

	//n=0:''
	//n=1:   排列组合
	//        (0):
	//            ('')----> ()
	//n=2:  排列组合
	//       (0)+1:
	//            ('')+()----> ()()
	//       (1)+0:
	//            (())+''----->(())
	//n=3: 排列组合
	//       (0)+2:
	//            ('')+()() ----> ()()()
	//            ('')+(())----->()(())
	//       (1)+1:
	//            (())+()------> (())()
	//       (2)+0:
	//            (()())+'' ----> (()())
	//            ((()))+''----->((()))
	//n=4: 排列组合
	//       (0)+3: 5*1=5
	//            ('')+()()()--->()()()()
	//            ('')+()(())--->()()(())
	//            ('')+ (())()--->()(())()
	//            ('')+(()())--->()(()())
	//            ('')+((()))--->()((()))
	//       (1)+2: 1*2=2
	//            (())+()()--->(())()()
	//            (())+(())--->(())(())
	//       (2)+1: 2*1=2
	//            (()())+()---->(()())()
	//            ((()))+()---->((()))()
	//       (3)+0:5*1 = 5
	//            (()()())+''---->(()()())
	//            (()(()))+''---->(()(()))
	//            ((())())+''---->((())())
	//            ((()()))+''---->((()()))
	//            (((())))+''---->(((())))
	// n =5: 排列组合
	// （0）+4: = 12
	// （1）+3：	5=1*5
	// (2)+2: 4= 2*2
	// (3)+1: 5 =5*1
	// (4)+0: 12= 12*1

	list := make([][]string, 0)
	// 初始化
	// 初始化n=0
	listZero := make([]string, 1)
	list = append(list, listZero)
	list = append(list, []string{"()"})
	if n <= 1 {
		return list[n]
	}
	for i := 2; i <= n; i++ {
		tempList := make([]string, 0)
		j := 0
		p := i - j - 1
		for j = 0; j < i; j++ {
			// 左括号的数量为j
			// 右括号的数量为i-1-j
			for _, s1 := range list[j] {
				for _, s2 := range list[p] {
					tempList = append(tempList, "("+s1+")"+s2)
				}
			}
			p--
		}
		list = append(list, tempList)
	}

	return list[n]
}
